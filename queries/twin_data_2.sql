CREATE OR REPLACE TABLE `brain-flash-dev.dagster_common.CN_twin_data_2` AS

WITH cte_test_pairing AS (
  SELECT DISTINCT
    TEST_ITEM_COMMUNICATIONKEY AS TEST_ITEM_COMMUNICATIONKEY,
    TEST_ITEM_COMMUNICATIONKEY AS TWIN_ITEM_COMMUNICATIONKEY
  FROM `brain-flash-dev.dagster_common.CN_item_selections`
),
cte_twin_data AS (
  SELECT 
    selection.TEST_ITEM_COMMUNICATIONKEY,
    selection.TWIN_ITEM_COMMUNICATIONKEY,
    dyn.CALENDAR_DATE,
    dyn.ANSPRACHE,
    dyn.ANSPRACHE_MARKETING_IMPUTED,
    dyn.FRACTION_SOLDOUT
  FROM `brain-flash-dev.dagster_common.CN_item_selections` selection
  JOIN `brain-flash-dev.dagster_common.CN_datamart_dynamic_subset_ext` dyn
    ON selection.TWIN_ITEM_COMMUNICATIONKEY = dyn.ITEM_COMMUNICATIONKEY
  WHERE dyn.CALENDAR_DATE < selection.TEST_FIRST_ANSPRACHE
  UNION ALL
  SELECT
    selection.TEST_ITEM_COMMUNICATIONKEY,
    selection.TWIN_ITEM_COMMUNICATIONKEY,
    dyn.CALENDAR_DATE,
    dyn.ANSPRACHE,
    dyn.ANSPRACHE_MARKETING_IMPUTED,
    dyn.FRACTION_SOLDOUT
  FROM cte_test_pairing selection
  JOIN `brain-flash-dev.dagster_common.CN_datamart_dynamic_subset_ext` dyn
    ON selection.TWIN_ITEM_COMMUNICATIONKEY = dyn.ITEM_COMMUNICATIONKEY
),
cte_twin_counts AS (
  SELECT
  TEST_ITEM_COMMUNICATIONKEY,
  COUNT(DISTINCT TWIN_ITEM_COMMUNICATIONKEY) AS TWIN_COUNT
  FROM cte_twin_data
  GROUP BY TEST_ITEM_COMMUNICATIONKEY
)
SELECT
  TEST_ITEM_COMMUNICATIONKEY,
  TWIN_ITEM_COMMUNICATIONKEY,
  CALENDAR_DATE,
  ANSPRACHE,
  ANSPRACHE_MARKETING_IMPUTED,
  FRACTION_SOLDOUT,
  TWIN_COUNT -1 AS TWIN_COUNT
FROM
  cte_twin_data twin_data
JOIN
  cte_twin_counts twin_counts
USING(TEST_ITEM_COMMUNICATIONKEY)
ORDER BY TWIN_COUNT DESC, TEST_ITEM_COMMUNICATIONKEY, TWIN_ITEM_COMMUNICATIONKEY, CALENDAR_DATE